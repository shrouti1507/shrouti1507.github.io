{"version":3,"file":"GoogleTagManager.min.js","sources":["../../../src/utils/logUtil.js","../../../src/integrations/GoogleTagManager/constants.js","../../../src/integrations/GoogleTagManager/browser.js","../../../src/utils/ScriptLoader.js"],"sourcesContent":["const LOG_LEVEL_INFO = 1;\nconst LOG_LEVEL_DEBUG = 2;\nconst LOG_LEVEL_WARN = 3;\nconst LOG_LEVEL_ERROR = 4;\nconst DEF_LOG_LEVEL = LOG_LEVEL_ERROR;\nlet LOG_LEVEL = DEF_LOG_LEVEL;\n\nconst logger = {\n  setLogLevel(logLevel) {\n    switch (logLevel.toUpperCase()) {\n      case 'INFO':\n        LOG_LEVEL = LOG_LEVEL_INFO;\n        break;\n      case 'DEBUG':\n        LOG_LEVEL = LOG_LEVEL_DEBUG;\n        break;\n      case 'WARN':\n        LOG_LEVEL = LOG_LEVEL_WARN;\n        break;\n      default:\n        LOG_LEVEL = DEF_LOG_LEVEL;\n        break;\n    }\n  },\n\n  info(...args) {\n    if (LOG_LEVEL <= LOG_LEVEL_INFO) {\n      console.info(...args);\n    }\n  },\n\n  debug(...args) {\n    if (LOG_LEVEL <= LOG_LEVEL_DEBUG) {\n      console.log(...args);\n    }\n  },\n\n  warn(...args) {\n    if (LOG_LEVEL <= LOG_LEVEL_WARN) {\n      console.warn(...args);\n    }\n  },\n\n  error(...args) {\n    if (LOG_LEVEL <= LOG_LEVEL_ERROR) {\n      console.error(...args);\n    }\n  },\n};\n\nexport default logger;\n","const NAME = 'GTM';\nconst CNameMapping = {\n  [NAME]: NAME,\n  'Google Tag Manager': NAME,\n  'google tag manager': NAME,\n  'googletag manager': NAME,\n  googletagmanager: NAME,\n};\n\nexport { NAME, CNameMapping };\n","/* eslint-disable class-methods-use-this */\nimport logger from '../../utils/logUtil';\nimport { LOAD_ORIGIN } from '../../utils/ScriptLoader';\nimport { NAME } from './constants';\n\nclass GoogleTagManager {\n  constructor(config, analytics, destinationInfo) {\n    if (analytics.logLevel) {\n      logger.setLogLevel(analytics.logLevel);\n    }\n    this.containerID = config.containerID;\n    this.name = NAME;\n    this.serverUrl = config.serverUrl;\n    this.areTransformationsConnected = destinationInfo && destinationInfo.areTransformationsConnected;\n    this.destinationId = destinationInfo && destinationInfo.destinationId;\n  }\n\n  init() {\n    logger.debug('===in init GoogleTagManager===');\n\n    const defaultUrl = `https://www.googletagmanager.com`;\n\n    // ref: https://developers.google.com/tag-platform/tag-manager/server-side/send-data#update_the_gtmjs_source_domain\n\n    window.finalUrl = this.serverUrl ? this.serverUrl : defaultUrl;\n\n    (function (w, d, s, l, i) {\n      w[l] = w[l] || [];\n      w[l].push({ 'gtm.start': new Date().getTime(), event: 'gtm.js' });\n      const f = d.getElementsByTagName(s)[0];\n      const j = d.createElement(s);\n      const dl = l !== 'dataLayer' ? `&l=${l}` : '';\n      j.setAttribute('data-loader', LOAD_ORIGIN);\n      j.async = true;\n      j.src = `${window.finalUrl}/gtm.js?id=${i}${dl}`;\n      f.parentNode.insertBefore(j, f);\n    })(window, document, 'script', 'dataLayer', this.containerID);\n  }\n\n  identify(rudderElement) {\n    // set the traits to the datalayer and put everything under the key traits\n    // keeping it under the traits key as destructing might conflict with `message.properties`\n    const rudderMessage = rudderElement.message;\n    const props = { traits: rudderMessage.context.traits };\n    this.sendToGTMDatalayer(props);\n  }\n\n  track(rudderElement) {\n    logger.debug('===in track GoogleTagManager===');\n    const rudderMessage = rudderElement.message;\n    const props = {\n      event: rudderMessage.event,\n      userId: rudderMessage.userId,\n      anonymousId: rudderMessage.anonymousId,\n      // set the traits as well if there is any\n      // it'll be null/undefined before identify call is made\n      traits: rudderMessage.context.traits,\n      ...rudderMessage.properties,\n    };\n    this.sendToGTMDatalayer(props);\n  }\n\n  page(rudderElement) {\n    logger.debug('===in page GoogleTagManager===');\n    const rudderMessage = rudderElement.message;\n    const pageName = rudderMessage.name;\n    const pageCategory = rudderMessage.properties ? rudderMessage.properties.category : undefined;\n\n    let eventName;\n\n    if (pageName) {\n      eventName = `Viewed ${pageName} page`;\n    }\n\n    if (pageCategory && pageName) {\n      eventName = `Viewed ${pageCategory} ${pageName} page`;\n    }\n    if (!eventName) {\n      eventName = 'Viewed a Page';\n    }\n    const props = {\n      event: eventName,\n      userId: rudderMessage.userId,\n      anonymousId: rudderMessage.anonymousId,\n      // set the traits as well if there is any\n      // it'll be null/undefined before identify call is made\n      traits: rudderMessage.context.traits,\n      ...rudderMessage.properties,\n    };\n\n    this.sendToGTMDatalayer(props);\n  }\n\n  isLoaded() {\n    return !!(window.dataLayer && Array.prototype.push !== window.dataLayer.push);\n  }\n\n  sendToGTMDatalayer(props) {\n    window.dataLayer.push(props);\n  }\n\n  isReady() {\n    return !!(window.dataLayer && Array.prototype.push !== window.dataLayer.push);\n  }\n}\n\nexport { GoogleTagManager };\n","/* eslint-disable no-use-before-define */\n// import logger from \"../utils/logUtil\";\n\nimport { handleError } from \"./errorHandler\";\n\nconst defaultAsyncState = true;\n\nexport const LOAD_ORIGIN = 'RS_JS_SDK';\n/**\n * Script loader\n * @param {String} id                               Id of the script\n * @param {String} src                              URL of the script\n * @param {Object} options                          Object containing different configuration\n * @param {Boolean} options.async                   Determines script will be loaded asynchronously or not\n * @param {Boolean} options.isNonNativeSDK          Determines whether the script that will be loaded is one of RS's own\n * @param {Boolean} options.skipDatasetAttributes   Determines whether to add or skip dataset attribute\n */\nconst ScriptLoader = (id, src, options = {}) => {\n  try {\n    const exists = document.getElementById(id);\n    if (exists) {\n      // logger.debug(\"script already loaded\");\n      return;\n    }\n\n    const js = document.createElement('script');\n    js.src = src;\n    js.async = options.async === undefined ? defaultAsyncState : options.async;\n    js.type = 'text/javascript';\n    js.id = id;\n    // This checking is in place to skip the dataset attribute for some cases(while loading polyfill)\n    if (options.skipDatasetAttributes !== true) {\n      js.setAttribute('data-loader', LOAD_ORIGIN);\n      if (options.isNonNativeSDK !== undefined) {\n        js.setAttribute('data-isNonNativeSDK', options.isNonNativeSDK);\n      }\n    }\n    const headElmColl = document.getElementsByTagName('head');\n    if (headElmColl.length > 0) {\n      // logger.debug(\"==adding script==\", js);\n      headElmColl[0].insertBefore(js, headElmColl[0].firstChild);\n    } else {\n      const e = document.getElementsByTagName('script')[0];\n      // logger.debug(\"==parent script==\", e);\n      // logger.debug(\"==adding script==\", js);\n      e.parentNode.insertBefore(js, e);\n    }\n  } catch (e) {\n    handleError(e);\n  }\n};\n\nexport default ScriptLoader;\n"],"names":["LOG_LEVEL","logger","logLevel","toUpperCase","_console2","console","log","apply","arguments","NAME","_defineProperty","_CNameMapping","GoogleTagManager","config","analytics","destinationInfo","_classCallCheck","this","containerID","name","serverUrl","areTransformationsConnected","destinationId","key","value","window","finalUrl","w","d","s","l","i","push","Date","getTime","event","f","getElementsByTagName","j","createElement","setAttribute","async","src","concat","parentNode","insertBefore","document","rudderElement","props","traits","message","context","sendToGTMDatalayer","rudderMessage","_objectSpread","userId","anonymousId","properties","eventName","pageName","pageCategory","category","undefined","dataLayer","Array","prototype"],"mappings":"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"}