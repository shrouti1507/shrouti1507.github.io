{"version":3,"file":"MicrosoftClarity.min.js","sources":["../../../src/integrations/MicrosoftClarity/constants.js","../../../src/utils/logger.js","../../../src/integrations/MicrosoftClarity/browser.js","../../../src/utils/ScriptLoader.js"],"sourcesContent":["const NAME = 'MICROSOFT_CLARITY';\nconst CNameMapping = {\n  [NAME]: NAME,\n  'Microsoft Clarity': NAME,\n  'Microsoft clarity': NAME,\n  'microsoft clarity': NAME,\n  Microsoft_clarity: NAME,\n  MicrosoftClarity: NAME,\n  MICROSOFTCLARITY: NAME,\n  microsoftclarity: NAME,\n  microsoftClarity: NAME,\n};\n\nexport { NAME, CNameMapping };\n","const LogLevel = {\n  LOG: {\n    value: 0,\n    method: console.log,\n  },\n  INFO: {\n    value: 1,\n    method: console.info,\n  },\n  DEBUG: {\n    value: 2,\n    method: console.debug,\n  },\n  WARN: {\n    value: 3,\n    method: console.warn,\n  },\n  ERROR: {\n    value: 4,\n    method: console.error,\n  },\n};\n\nclass Logger {\n  constructor(scope, level) {\n    this.level = +level || LogLevel.ERROR.value;\n    this.scope = scope || '';\n  }\n\n  setLogLevel(levelStr) {\n    if (levelStr && typeof levelStr === 'string') {\n      const lvlStr = levelStr.toUpperCase();\n      this.level = LogLevel[lvlStr] ? LogLevel[lvlStr].value : this.level;\n    }\n  }\n\n  setScope(scopeVal) {\n    this.scope = scopeVal || this.scope;\n  }\n\n  log(...args) {\n    this.logBase(args, LogLevel.LOG.value);\n  }\n\n  info(...args) {\n    this.logBase(args, LogLevel.INFO.value);\n  }\n\n  debug(...args) {\n    this.logBase(args, LogLevel.DEBUG.value);\n  }\n\n  warn(...args) {\n    this.logBase(args, LogLevel.WARN.value);\n  }\n\n  error(...args) {\n    this.logBase(args, LogLevel.ERROR.value);\n  }\n\n  logBase(args, logLevel) {\n    if (this.level <= logLevel) {\n      const logVal = Object.values(LogLevel).find((val) => val.value === logLevel);\n      logVal.method(...this.getLogData(args));\n    }\n  }\n\n  /**\n   * Formats the console message using `scope`\n   * @param {*} logArgs\n   * @returns updated log arguments\n   */\n  getLogData(logArgs) {\n    if (Array.isArray(logArgs) && logArgs.length > 0) {\n      // prefix SDK identifier\n      let msg = `%c RS SDK`;\n\n      // format the log message using `scope`\n      if (this.scope) {\n        msg = `${msg} - ${this.scope}`;\n      }\n\n      // trim whitespaces\n      const orgMsg = logArgs[0].trim();\n\n      // prepare the final message\n      msg = `${msg} %c ${orgMsg}`;\n\n      const retArgs = [];\n      retArgs.push(msg);\n\n      // add style for the prefix\n      retArgs.push('font-weight: bold; background: black; color: white;');\n\n      // reset the style for the actual message\n      retArgs.push('font-weight: normal;');\n\n      // append rest of the original arguments\n      retArgs.push(...logArgs.slice(1));\n      return retArgs;\n    }\n    return logArgs;\n  }\n}\n\nexport default Logger;\n","/* eslint-disable */\nimport { NAME } from './constants';\nimport Logger from '../../utils/logger';\nimport { LOAD_ORIGIN } from '../../utils/ScriptLoader';\n\nconst logger = new Logger(NAME);\nclass MicrosoftClarity {\n  constructor(config, analytics, destinationInfo) {\n    if (analytics.logLevel) {\n      logger.setLogLevel(analytics.logLevel);\n    }\n    this.name = NAME;\n    this.projectId = config.projectId;\n    this.cookieConsent = config.cookieConsent;\n    this.areTransformationsConnected = destinationInfo && destinationInfo.areTransformationsConnected;\n    this.destinationId = destinationInfo && destinationInfo.destinationId;\n  }\n\n  loadScript() {\n    (function (c, l, a, r, i, t, y) {\n      c[a] =\n        c[a] ||\n        function () {\n          (c[a].q = c[a].q || []).push(arguments);\n        };\n      t = l.createElement(r);\n      t.async = 1;\n      t.src = 'https://www.clarity.ms/tag/' + i;\n      t.setAttribute('data-loader', LOAD_ORIGIN);\n      y = l.getElementsByTagName(r)[0];\n      y.parentNode.insertBefore(t, y);\n    })(window, document, 'clarity', 'script', this.projectId);\n    if (this.cookieConsent) {\n      window.clarity('consent');\n    }\n  }\n\n  init() {\n    logger.debug('===In init Microsoft Clarity===');\n    this.loadScript();\n  }\n\n  isLoaded() {\n    logger.debug('===In isLoaded Microsoft Clarity===');\n    return !!window.clarity;\n  }\n\n  isReady() {\n    logger.debug('===In isReady Microsoft Clarity===');\n    return !!window.clarity;\n  }\n\n  identify(rudderElement) {\n    logger.debug('===In Microsoft Clarity Identify===');\n    const { message } = rudderElement;\n    const { userId, context } = message;\n    if (!userId) {\n      logger.error('[Microsoft Clarity] :: userId is required for an identify call');\n      return;\n    }\n    let sessionId;\n    let customPageId;\n    if (context?.sessionId) {\n      sessionId = context.sessionId;\n    }\n    if (context?.traits?.customPageId) {\n      customPageId = context.traits.customPageId;\n    }\n    window.clarity('identify', userId, sessionId, customPageId);\n    if (context?.traits) {\n      const { traits } = context;\n      const keys = Object.keys(traits);\n      keys.forEach((key) => {\n        window.clarity('set', key, traits[key]);\n      });\n    }\n  }\n}\n\nexport default MicrosoftClarity;\n","/* eslint-disable no-use-before-define */\n// import logger from \"../utils/logUtil\";\n\nimport { handleError } from \"./errorHandler\";\n\nconst defaultAsyncState = true;\n\nexport const LOAD_ORIGIN = 'RS_JS_SDK';\n/**\n * Script loader\n * @param {String} id                               Id of the script\n * @param {String} src                              URL of the script\n * @param {Object} options                          Object containing different configuration\n * @param {Boolean} options.async                   Determines script will be loaded asynchronously or not\n * @param {Boolean} options.isNonNativeSDK          Determines whether the script that will be loaded is one of RS's own\n * @param {Boolean} options.skipDatasetAttributes   Determines whether to add or skip dataset attribute\n */\nconst ScriptLoader = (id, src, options = {}) => {\n  try {\n    const exists = document.getElementById(id);\n    if (exists) {\n      // logger.debug(\"script already loaded\");\n      return;\n    }\n\n    const js = document.createElement('script');\n    js.src = src;\n    js.async = options.async === undefined ? defaultAsyncState : options.async;\n    js.type = 'text/javascript';\n    js.id = id;\n    // This checking is in place to skip the dataset attribute for some cases(while loading polyfill)\n    if (options.skipDatasetAttributes !== true) {\n      js.setAttribute('data-loader', LOAD_ORIGIN);\n      if (options.isNonNativeSDK !== undefined) {\n        js.setAttribute('data-isNonNativeSDK', options.isNonNativeSDK);\n      }\n    }\n    const headElmColl = document.getElementsByTagName('head');\n    if (headElmColl.length > 0) {\n      // logger.debug(\"==adding script==\", js);\n      headElmColl[0].insertBefore(js, headElmColl[0].firstChild);\n    } else {\n      const e = document.getElementsByTagName('script')[0];\n      // logger.debug(\"==parent script==\", e);\n      // logger.debug(\"==adding script==\", js);\n      e.parentNode.insertBefore(js, e);\n    }\n  } catch (e) {\n    handleError(e);\n  }\n};\n\nexport default ScriptLoader;\n"],"names":["_CNameMapping","NAME","_defineProperty","LogLevel","LOG","value","method","console","log","INFO","info","DEBUG","debug","WARN","warn","ERROR","error","Logger","scope","level","_classCallCheck","this","_createClass","key","levelStr","lvlStr","toUpperCase","scopeVal","_len","arguments","length","args","Array","_key","logBase","_len2","_key2","_len3","_key3","_len4","_key4","_len5","_key5","logLevel","logVal","Object","values","find","val","apply","_toConsumableArray","getLogData","logArgs","isArray","msg","concat","orgMsg","trim","retArgs","push","slice","logger","MicrosoftClarity","config","analytics","destinationInfo","setLogLevel","name","projectId","cookieConsent","areTransformationsConnected","destinationId","c","l","a","r","i","t","y","window","document","q","createElement","async","src","setAttribute","getElementsByTagName","parentNode","insertBefore","clarity","loadScript","rudderElement","_context$traits","sessionId","customPageId","message","userId","context","traits","keys","forEach"],"mappings":"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"}