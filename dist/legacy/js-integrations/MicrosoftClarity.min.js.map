{"version":3,"file":"MicrosoftClarity.min.js","sources":["../../../src/integrations/MicrosoftClarity/constants.js","../../../src/utils/logger.js","../../../src/integrations/MicrosoftClarity/browser.js","../../../src/utils/ScriptLoader.js"],"sourcesContent":["const NAME = 'MICROSOFT_CLARITY';\nconst CNameMapping = {\n  [NAME]: NAME,\n  'Microsoft Clarity': NAME,\n  'Microsoft clarity': NAME,\n  'microsoft clarity': NAME,\n  Microsoft_clarity: NAME,\n  MicrosoftClarity: NAME,\n  MICROSOFTCLARITY: NAME,\n  microsoftclarity: NAME,\n  microsoftClarity: NAME,\n};\n\nexport { NAME, CNameMapping };\n","const LogLevel = {\n  LOG: {\n    value: 0,\n    method: console.log,\n  },\n  INFO: {\n    value: 1,\n    method: console.info,\n  },\n  DEBUG: {\n    value: 2,\n    method: console.debug,\n  },\n  WARN: {\n    value: 3,\n    method: console.warn,\n  },\n  ERROR: {\n    value: 4,\n    method: console.error,\n  },\n};\n\nclass Logger {\n  constructor(scope, level) {\n    this.level = +level || LogLevel.ERROR.value;\n    this.scope = scope || '';\n  }\n\n  setLogLevel(levelStr) {\n    if (levelStr && typeof levelStr === 'string') {\n      const lvlStr = levelStr.toUpperCase();\n      this.level = LogLevel[lvlStr] ? LogLevel[lvlStr].value : this.level;\n    }\n  }\n\n  setScope(scopeVal) {\n    this.scope = scopeVal || this.scope;\n  }\n\n  log(...args) {\n    this.logBase(args, LogLevel.LOG.value);\n  }\n\n  info(...args) {\n    this.logBase(args, LogLevel.INFO.value);\n  }\n\n  debug(...args) {\n    this.logBase(args, LogLevel.DEBUG.value);\n  }\n\n  warn(...args) {\n    this.logBase(args, LogLevel.WARN.value);\n  }\n\n  error(...args) {\n    this.logBase(args, LogLevel.ERROR.value);\n  }\n\n  logBase(args, logLevel) {\n    if (this.level <= logLevel) {\n      const logVal = Object.values(LogLevel).find((val) => val.value === logLevel);\n      logVal.method(...this.getLogData(args));\n    }\n  }\n\n  /**\n   * Formats the console message using `scope`\n   * @param {*} logArgs\n   * @returns updated log arguments\n   */\n  getLogData(logArgs) {\n    if (Array.isArray(logArgs) && logArgs.length > 0) {\n      // prefix SDK identifier\n      let msg = `%c RS SDK`;\n\n      // format the log message using `scope`\n      if (this.scope) {\n        msg = `${msg} - ${this.scope}`;\n      }\n\n      // trim whitespaces\n      const orgMsg = logArgs[0].trim();\n\n      // prepare the final message\n      msg = `${msg} %c ${orgMsg}`;\n\n      const retArgs = [];\n      retArgs.push(msg);\n\n      // add style for the prefix\n      retArgs.push('font-weight: bold; background: black; color: white;');\n\n      // reset the style for the actual message\n      retArgs.push('font-weight: normal;');\n\n      // append rest of the original arguments\n      retArgs.push(...logArgs.slice(1));\n      return retArgs;\n    }\n    return logArgs;\n  }\n}\n\nexport default Logger;\n","/* eslint-disable */\nimport { NAME } from './constants';\nimport Logger from '../../utils/logger';\nimport { LOAD_ORIGIN } from '../../utils/ScriptLoader';\n\nconst logger = new Logger(NAME);\nclass MicrosoftClarity {\n  constructor(config, analytics, destinationInfo) {\n    if (analytics.logLevel) {\n      logger.setLogLevel(analytics.logLevel);\n    }\n    this.name = NAME;\n    this.projectId = config.projectId;\n    this.cookieConsent = config.cookieConsent;\n    this.areTransformationsConnected = destinationInfo && destinationInfo.areTransformationsConnected;\n    this.destinationId = destinationInfo && destinationInfo.destinationId;\n  }\n\n  loadScript() {\n    (function (c, l, a, r, i, t, y) {\n      c[a] =\n        c[a] ||\n        function () {\n          (c[a].q = c[a].q || []).push(arguments);\n        };\n      t = l.createElement(r);\n      t.async = 1;\n      t.src = 'https://www.clarity.ms/tag/' + i;\n      t.setAttribute('data-loader', LOAD_ORIGIN);\n      y = l.getElementsByTagName(r)[0];\n      y.parentNode.insertBefore(t, y);\n    })(window, document, 'clarity', 'script', this.projectId);\n    if (this.cookieConsent) {\n      window.clarity('consent');\n    }\n  }\n\n  init() {\n    logger.debug('===In init Microsoft Clarity===');\n    this.loadScript();\n  }\n\n  isLoaded() {\n    logger.debug('===In isLoaded Microsoft Clarity===');\n    return !!window.clarity;\n  }\n\n  isReady() {\n    logger.debug('===In isReady Microsoft Clarity===');\n    return !!window.clarity;\n  }\n\n  identify(rudderElement) {\n    logger.debug('===In Microsoft Clarity Identify===');\n    const { message } = rudderElement;\n    const { userId, context } = message;\n    if (!userId) {\n      logger.error('[Microsoft Clarity] :: userId is required for an identify call');\n      return;\n    }\n    let sessionId;\n    let customPageId;\n    if (context?.sessionId) {\n      sessionId = context.sessionId;\n    }\n    if (context?.traits?.customPageId) {\n      customPageId = context.traits.customPageId;\n    }\n    window.clarity('identify', userId, sessionId, customPageId);\n    if (context?.traits) {\n      const { traits } = context;\n      const keys = Object.keys(traits);\n      keys.forEach((key) => {\n        window.clarity('set', key, traits[key]);\n      });\n    }\n  }\n}\n\nexport default MicrosoftClarity;\n","/* eslint-disable no-use-before-define */\n// import logger from \"../utils/logUtil\";\n\nimport { handleError } from \"./errorHandler\";\n\nconst defaultAsyncState = true;\n\nexport const LOAD_ORIGIN = 'RS_JS_SDK';\n/**\n * Script loader\n * @param {String} id                               Id of the script\n * @param {String} src                              URL of the script\n * @param {Object} options                          Object containing different configuration\n * @param {Boolean} options.async                   Determines script will be loaded asynchronously or not\n * @param {Boolean} options.isNonNativeSDK          Determines whether the script that will be loaded is one of RS's own\n * @param {Boolean} options.skipDatasetAttributes   Determines whether to add or skip dataset attribute\n */\nconst ScriptLoader = (id, src, options = {}) => {\n  try {\n    const exists = document.getElementById(id);\n    if (exists) {\n      // logger.debug(\"script already loaded\");\n      return;\n    }\n\n    const js = document.createElement('script');\n    js.src = src;\n    js.async = options.async === undefined ? defaultAsyncState : options.async;\n    js.type = 'text/javascript';\n    js.id = id;\n    // This checking is in place to skip the dataset attribute for some cases(while loading polyfill)\n    if (options.skipDatasetAttributes !== true) {\n      js.setAttribute('data-loader', LOAD_ORIGIN);\n      if (options.isNonNativeSDK !== undefined) {\n        js.setAttribute('data-isNonNativeSDK', options.isNonNativeSDK);\n      }\n    }\n    const headElmColl = document.getElementsByTagName('head');\n    if (headElmColl.length > 0) {\n      // logger.debug(\"==adding script==\", js);\n      headElmColl[0].insertBefore(js, headElmColl[0].firstChild);\n    } else {\n      const e = document.getElementsByTagName('script')[0];\n      // logger.debug(\"==parent script==\", e);\n      // logger.debug(\"==adding script==\", js);\n      e.parentNode.insertBefore(js, e);\n    }\n  } catch (e) {\n    handleError(e);\n  }\n};\n\nexport default ScriptLoader;\n"],"names":["_CNameMapping","NAME","_defineProperty","LOG","value","method","console","log","INFO","info","DEBUG","debug","WARN","warn","ERROR","error","Logger","scope","level","_classCallCheck","this","LogLevel","_createClass","key","levelStr","lvlStr","toUpperCase","scopeVal","_len","arguments","length","args","_key","logBase","Array","_len2","_key2","_len4","_key4","_len5","_key5","logLevel","logVal","Object","values","find","val","_toConsumableArray","getLogData","logArgs","isArray","msg","concat","orgMsg","trim","retArgs","push","slice","logger","MicrosoftClarity","config","analytics","destinationInfo","setLogLevel","name","projectId","cookieConsent","areTransformationsConnected","destinationId","c","l","a","r","i","t","y","window","document","q","createElement","async","src","setAttribute","getElementsByTagName","parentNode","insertBefore","clarity","loadScript","rudderElement","sessionId","customPageId","message","userId","context","traits","_context$traits","keys","forEach"],"mappings":"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"}